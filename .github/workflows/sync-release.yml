name: Reusable Sync Release Workflow

on:
  workflow_call:
    inputs:
      staging_branch:
        description: "Staging/development branch name"
        required: false
        type: string
        default: "stage"
      main_branch:
        description: "Production branch name"
        required: false
        type: string
        default: "main"

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-to-stage:
    name: Sync Release Back to Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Syncing release v$VERSION back to ${{ inputs.staging_branch }}"

      - name: Create Pull Request
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use GitHub CLI to create PR (it's built into GitHub Actions)
          PR_URL=$(gh pr create \
            --base "${{ inputs.staging_branch }}" \
            --head "${{ inputs.main_branch }}" \
            --title "üîÑ Sync Release v${{ steps.get_version.outputs.VERSION }} back to ${{ inputs.staging_branch }}" \
            --body "## üîÑ Release Sync

This PR automatically syncs the release v${{ steps.get_version.outputs.VERSION }} from \`${{ inputs.main_branch }}\` back to \`${{ inputs.staging_branch }}\`.

### Why is this needed?
- Keeps \`${{ inputs.staging_branch }}\` up-to-date with production releases
- Ensures version numbers stay in sync
- Prevents merge conflicts in future releases

### What's included?
- Version bump to ${{ steps.get_version.outputs.VERSION }}
- Any hotfixes or changes made during the release process
- The tagged commit from production

---
*This PR was automatically created after tagging release v${{ steps.get_version.outputs.VERSION }}*" \
            --label "release-sync" \
            --label "automated" 2>&1 || echo "PR_CREATE_FAILED")
          
          if [ "$PR_URL" = "PR_CREATE_FAILED" ] || [ -z "$PR_URL" ]; then
            echo "‚ÑπÔ∏è Could not create PR - likely already exists or branches are up to date"
            # Check if PR already exists
            EXISTING_PR=$(gh pr list --base "${{ inputs.staging_branch }}" --head "${{ inputs.main_branch }}" --json number --jq '.[0].number' || echo "")
            if [ -n "$EXISTING_PR" ]; then
              echo "‚úÖ Found existing PR #$EXISTING_PR"
              echo "PR_NUMBER=$EXISTING_PR" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è No sync needed - branches may already be in sync"
            fi
          else
            echo "‚úÖ Created PR: $PR_URL"
            # Extract PR number from URL for next step
            PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Enable auto-merge
        if: steps.create-pr.outputs.PR_NUMBER
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Attempting to enable auto-merge for PR #${{ steps.create-pr.outputs.PR_NUMBER }}..."
          gh pr merge ${{ steps.create-pr.outputs.PR_NUMBER }} --auto --merge 