name: Reusable Sync Release Workflow

on:
  workflow_call:
    inputs:
      staging_branch:
        description: "Staging/development branch name"
        required: false
        type: string
        default: "stage"
      main_branch:
        description: "Production branch name"
        required: false
        type: string
        default: "main"

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-to-stage:
    name: Sync Release Back to Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Syncing release v$VERSION back to ${{ inputs.staging_branch }}"

      - name: Create labels if they don't exist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📌 Ensuring required labels exist..."

          # Create 'release-sync' label if it doesn't exist
          gh label create "release-sync" \
            --description "PR to sync release back to staging" \
            --color "0052CC" \
            --force || echo "Label 'release-sync' already exists"

          # Create 'automated' label if it doesn't exist  
          gh label create "automated" \
            --description "Automated PR" \
            --color "EDEDED" \
            --force || echo "Label 'automated' already exists"

          echo "✅ Labels ready"

      - name: Create Pull Request
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use GitHub CLI to create PR (it's built into GitHub Actions)
          PR_BODY="## 🔄 Release Sync\n\nThis PR automatically syncs the release v${{ steps.get_version.outputs.VERSION }} from \`${{ inputs.main_branch }}\` back to \`${{ inputs.staging_branch }}\`.\n\n### Why is this needed?\n- Keeps \`${{ inputs.staging_branch }}\` up-to-date with production releases\n- Ensures version numbers stay in sync\n- Prevents merge conflicts in future releases\n\n### What's included?\n- Version bump to ${{ steps.get_version.outputs.VERSION }}\n- Any hotfixes or changes made during the release process\n- The tagged commit from production\n\n---\n*This PR was automatically created after tagging release v${{ steps.get_version.outputs.VERSION }}*"

          PR_URL=$(gh pr create \
            --base "${{ inputs.staging_branch }}" \
            --head "${{ inputs.main_branch }}" \
            --title "🔄 Sync Release v${{ steps.get_version.outputs.VERSION }} back to ${{ inputs.staging_branch }}" \
            --body "$PR_BODY" \
            --label "release-sync" \
            --label "automated" 2>&1 || echo "PR_CREATE_FAILED")

          if [ "$PR_URL" = "PR_CREATE_FAILED" ] || [ -z "$PR_URL" ]; then
            echo "ℹ️ Could not create PR - likely already exists or branches are up to date"
            # Check if PR already exists
            EXISTING_PR=$(gh pr list --base "${{ inputs.staging_branch }}" --head "${{ inputs.main_branch }}" --json number --jq '.[0].number' || echo "")
            if [ -n "$EXISTING_PR" ]; then
              echo "✅ Found existing PR #$EXISTING_PR"
              echo "PR_NUMBER=$EXISTING_PR" >> $GITHUB_OUTPUT
            else
              echo "ℹ️ No sync needed - branches may already be in sync"
            fi
          else
            echo "✅ Created PR: $PR_URL"
            # Extract PR number from URL for next step
            PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Enable auto-merge
        if: steps.create-pr.outputs.PR_NUMBER
        id: auto-merge
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Attempting to enable auto-merge for PR #${{ steps.create-pr.outputs.PR_NUMBER }}..."

          # Try to enable auto-merge
          if gh pr merge ${{ steps.create-pr.outputs.PR_NUMBER }} --auto --merge 2>&1; then
            echo "✅ Auto-merge enabled successfully"
            echo "auto_merge_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not enable auto-merge (this is okay - might need manual review)"
            echo "auto_merge_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Add summary
        run: |
          echo "## 🔄 Release Sync Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.create-pr.outputs.PR_NUMBER }}" ]; then
            echo "### Pull Request #${{ steps.create-pr.outputs.PR_NUMBER }}" >> $GITHUB_STEP_SUMMARY
            echo "A PR has been created to sync release v${{ steps.get_version.outputs.VERSION }} back to ${{ inputs.staging_branch }}." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[View Pull Request](https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.PR_NUMBER }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.auto-merge.outputs.auto_merge_enabled }}" = "true" ]; then
              echo "✅ **Auto-merge enabled** - PR will merge automatically once checks pass" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Manual merge required** - Please review and merge the PR" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This usually means:" >> $GITHUB_STEP_SUMMARY
              echo "- There might be merge conflicts to resolve" >> $GITHUB_STEP_SUMMARY
              echo "- Branch protection rules require reviews" >> $GITHUB_STEP_SUMMARY
              echo "- Or checks need to pass first" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No PR needed - branches are already in sync or a PR already exists." >> $GITHUB_STEP_SUMMARY
          fi
